// Copyright 2024 - See NOTICE file for copyright holders.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#![cfg(test)]
use alloy_primitives::{address, keccak256, Address as EthAddr};

use crate::ethsig::ethsig::EthSigner;
use crate::sol::get_channel_id_cross;

use crate::convert_state;
use crate::ethsig::ethsig::EthHash;
use crate::get_channel_id;
use crate::multi::AddressType;
use crate::{A, B};
use alloy_sol_types::SolValue;
use ed25519_dalek::Signer;
use ed25519_dalek::SigningKey as Ed25519SigningKey;
use k256::ecdsa::{SigningKey, VerifyingKey};
use k256::elliptic_curve::sec1::ToEncodedPoint;
use rand::thread_rng;
use soroban_sdk::token::StellarAssetClient;
use soroban_sdk::xdr::ToXdr;
use soroban_sdk::{token, Bytes, IntoVal};

use super::{Adjudicator, AdjudicatorClient, Balances, Params, Participant, State};
use crate::multi;
use soroban_sdk::{
    testutils::{Address as _, BytesN as _, Ledger, LedgerInfo},
    vec, Address, BytesN, Env, Vec,
};
use token::Client as TokenClient;

#[test]
fn test_signature_verification_secp256k1() {
    // Test if Eth-backend-generated signature verifies if:
    // - participant with public key is randomly generated by perun-eth-backend in go
    // - message is signed by the participant's account in the perun-eth-backend, generating a signature
    // - the generated signature, as well as the message are used to recover the participant's public key and verify that it is identical to the signer's key
    let env = Env::default();

    let mut bal_a = vec![&env];
    bal_a.push_back(100_i128);
    bal_a.push_back(150_i128);

    let mut bal_b = vec![&env];
    bal_b.push_back(200_i128);
    bal_b.push_back(250_i128);

    let t = setup(&env, 10, bal_a, bal_b, true, true, false);

    let msg_text: &[u8] = b"hello world";
    let msg_bytes = Bytes::from_slice(&t.env, msg_text);
    let msg_hashed = t.env.crypto().keccak256(&msg_bytes);
    let hash_bytes: [u8; 32] = msg_hashed.into();

    let prefix = b"\x19Ethereum Signed Message:\n32";
    let prefix_hash = [prefix.as_ref(), &hash_bytes[..]].concat();
    let prefixhash_slice: &[u8] = prefix_hash.as_slice();
    let prefixhash_bytes = Bytes::from_slice(&t.env, prefixhash_slice);
    let hashed_msg_with_prefix = t.env.crypto().keccak256(&prefixhash_bytes);
    let sig: [u8; 64] = [
        16, 17, 239, 225, 176, 41, 232, 223, 159, 227, 117, 129, 82, 28, 153, 222, 0, 156, 90, 210,
        67, 185, 127, 194, 165, 8, 234, 127, 220, 3, 105, 94, 18, 93, 100, 241, 189, 4, 20, 55,
        186, 7, 117, 147, 234, 132, 47, 149, 229, 167, 190, 28, 10, 24, 140, 100, 240, 13, 82, 171,
        238, 2, 111, 69,
    ]; // 28,

    let pubkey: [u8; 65] = [
        4, 102, 214, 214, 113, 6, 75, 129, 66, 93, 131, 63, 72, 125, 19, 123, 3, 101, 142, 161,
        232, 30, 54, 48, 40, 7, 153, 40, 167, 169, 110, 125, 109, 87, 40, 52, 175, 161, 196, 43,
        104, 153, 202, 94, 107, 143, 82, 133, 139, 163, 26, 53, 183, 76, 213, 126, 215, 249, 57,
        47, 254, 127, 202, 29, 189,
    ];

    let sig_bytes = BytesN::<64>::from_array(&t.env, &sig);
    let pubkey_bytes = BytesN::<65>::from_array(&t.env, &pubkey);

    let rec_id: u32 = 1;

    let recov_pubkey =
        t.env
            .crypto()
            .secp256k1_recover(&hashed_msg_with_prefix, &sig_bytes, rec_id);

    assert_eq!(recov_pubkey, pubkey_bytes);
}

#[test]
fn test_signature_verification_k256() {
    // Test if signature verifies if:
    // - participant with public key is randomly generated by perun-eth-backend in go
    // - message is signed by the participant's account in the perun-eth-backend, generating a signature
    // - the generated signature, as well as the message are used to recover the participant's public key and verify that it is identical to the signer's key
    let env = Env::default();
    let mut bal_a = vec![&env];
    bal_a.push_back(100_i128);
    bal_a.push_back(150_i128);

    let mut bal_b = vec![&env];
    bal_b.push_back(200_i128);
    bal_b.push_back(250_i128);

    let t = setup(&env, 10, bal_a, bal_b, true, true, false);

    let msg_text: &[u8] = b"hello world";
    let msg_bytes = Bytes::from_slice(&t.env, msg_text);
    let msg_hashed = t.env.crypto().keccak256(&msg_bytes);
    let hash_bytes: [u8; 32] = msg_hashed.into();

    let prefix = b"\x19Ethereum Signed Message:\n32";
    let prefix_hash = [prefix.as_ref(), &hash_bytes[..]].concat();
    let prefixhash_slice: &[u8] = prefix_hash.as_slice();
    let prefixhash_bytes = Bytes::from_slice(&t.env, prefixhash_slice);
    let hashed_msg_with_prefix = t.env.crypto().keccak256(&prefixhash_bytes);
    let sig: [u8; 64] = [
        16, 17, 239, 225, 176, 41, 232, 223, 159, 227, 117, 129, 82, 28, 153, 222, 0, 156, 90, 210,
        67, 185, 127, 194, 165, 8, 234, 127, 220, 3, 105, 94, 18, 93, 100, 241, 189, 4, 20, 55,
        186, 7, 117, 147, 234, 132, 47, 149, 229, 167, 190, 28, 10, 24, 140, 100, 240, 13, 82, 171,
        238, 2, 111, 69,
    ]; // 28,

    let pubkey: [u8; 65] = [
        4, 102, 214, 214, 113, 6, 75, 129, 66, 93, 131, 63, 72, 125, 19, 123, 3, 101, 142, 161,
        232, 30, 54, 48, 40, 7, 153, 40, 167, 169, 110, 125, 109, 87, 40, 52, 175, 161, 196, 43,
        104, 153, 202, 94, 107, 143, 82, 133, 139, 163, 26, 53, 183, 76, 213, 126, 215, 249, 57,
        47, 254, 127, 202, 29, 189,
    ];

    let sig_bytes = BytesN::<64>::from_array(&t.env, &sig);
    let pubkey_bytes = BytesN::<65>::from_array(&t.env, &pubkey);

    let rec_id: u32 = 1;

    let recov_pubkey =
        t.env
            .crypto()
            .secp256k1_recover(&hashed_msg_with_prefix, &sig_bytes, rec_id);

    assert_eq!(recov_pubkey, pubkey_bytes);
}

#[test]
fn test_honest_payment_cross_sameasset() {
    let env = Env::default();
    let mut bal_a = vec![&env];

    let bal_contract_after_afund = vec![&env, 100, 150];
    let bal_contract_after_bfund = vec![&env, 300, 400];
    let bal_contract_after_awdraw = vec![&env, 200, 200];
    let bal_contract_after_bwdraw = vec![&env, 0, 0];
    let bal_contract_after_final = vec![&env, 300, 400];
    let bal_a_after_afund = vec![&env, 0, 0];
    let bal_a_after_awdraw = vec![&env, 100, 200];
    let bal_b_after_bfund = vec![&env, 0, 0];
    let bal_b_after_bwdraw = vec![&env, 200, 200];
    let to_send_a = vec![&env, 0, 50];

    bal_a.push_back(100_i128);
    bal_a.push_back(150_i128);

    let mut bal_b = vec![&env];
    bal_b.push_back(200_i128);
    bal_b.push_back(250_i128);

    let cross_chain = true;
    let mixed_assets = false;

    let mut t = setup(&env, 10, bal_a, bal_b, true, cross_chain, mixed_assets);
    let stellar_channel_id = t.state.channel_id.get_unchecked(0);

    t.client.open(&t.params, &t.state);
    t.verify_state(&t.state, &stellar_channel_id);

    t.client.fund(&stellar_channel_id, &A);
    t.verify_bal_contract(bal_contract_after_afund);
    t.verify_bal_a(bal_a_after_afund);

    t.client.fund(&stellar_channel_id, &B);
    t.verify_bal_contract(bal_contract_after_bfund);
    t.verify_bal_b(bal_b_after_bfund);

    t.send_to_a(to_send_a);

    t.finalize();

    let sig_a_stellar = t.sigs_ccabi_a();
    let sig_b_stellar = t.sigs_ccabi_b();

    t.client
        .close(&t.state, &sig_a_stellar, &sig_b_stellar, &cross_chain);
    t.verify_state(&t.state, &stellar_channel_id);
    t.verify_bal_contract(bal_contract_after_final);

    t.client.withdraw(&stellar_channel_id, &A);
    t.verify_bal_a(bal_a_after_awdraw);
    t.verify_bal_contract(bal_contract_after_awdraw);

    t.client.withdraw(&stellar_channel_id, &B);
    t.verify_bal_b(bal_b_after_bwdraw);
    t.verify_bal_contract(bal_contract_after_bwdraw);
}

#[test]
fn test_honest_payment_cross_mixedssets() {
    let env = Env::default();
    let mut bal_a = vec![&env];

    let bal_contract_after_afund = vec![&env, 100, 150];
    let bal_contract_after_bfund = vec![&env, 300, 400];
    let bal_contract_after_awdraw = vec![&env, 200, 200];
    let bal_contract_after_bwdraw = vec![&env, 0, 0];
    let bal_contract_after_final = vec![&env, 300, 400];
    let bal_a_after_afund = vec![&env, 0, 0];
    let bal_a_after_awdraw = vec![&env, 100, 200];
    let bal_b_after_bfund = vec![&env, 0, 0];
    let bal_b_after_bwdraw = vec![&env, 200, 200];
    let to_send_a = vec![&env, 0, 50];

    bal_a.push_back(100_i128);
    bal_a.push_back(150_i128);

    let mut bal_b = vec![&env];
    bal_b.push_back(200_i128);
    bal_b.push_back(250_i128);

    let cross_chain = true;
    let mixed_assets = true;

    let mut t = setup(&env, 10, bal_a, bal_b, true, cross_chain, mixed_assets);
    let stellar_channel_id = t.state.channel_id.get_unchecked(0);

    t.client.open(&t.params, &t.state);
    t.verify_state(&t.state, &stellar_channel_id);

    t.client.fund(&stellar_channel_id, &A);
    t.verify_bal_contract(bal_contract_after_afund);
    t.verify_bal_a(bal_a_after_afund);

    t.client.fund(&stellar_channel_id, &B);
    t.verify_bal_contract(bal_contract_after_bfund);
    t.verify_bal_b(bal_b_after_bfund);

    t.send_to_a(to_send_a);

    t.finalize();

    let sig_a_stellar = t.sigs_ccabi_a();
    let sig_b_stellar = t.sigs_ccabi_b();

    t.client
        .close(&t.state, &sig_a_stellar, &sig_b_stellar, &cross_chain);
    t.verify_state(&t.state, &stellar_channel_id);
    t.verify_bal_contract(bal_contract_after_final);

    t.client.withdraw(&stellar_channel_id, &A);
    t.verify_bal_a(bal_a_after_awdraw);
    t.verify_bal_contract(bal_contract_after_awdraw);

    t.client.withdraw(&stellar_channel_id, &B);
    t.verify_bal_b(bal_b_after_bwdraw);
    t.verify_bal_contract(bal_contract_after_bwdraw);
}

#[test]
fn test_funding_abort_cross_sameasset() {
    let env = Env::default();

    let cross_chain = true;

    let bal_a = vec![&env, 100, 150];
    let bal_b = vec![&env, 200, 250];

    let bal_a_after_fund = vec![&env, 0, 0];
    let bal_a_after_abort = vec![&env, 100, 150];

    let bal_contract_after_afund = vec![&env, 100, 150];
    let bal_contract_after_abort = vec![&env, 0, 0];

    let t = setup(&env, 10, bal_a, bal_b, true, cross_chain, false);

    let stellar_channel_id = t.state.channel_id.get_unchecked(0);

    t.client.open(&t.params, &t.state);
    t.verify_state(&t.state, &stellar_channel_id);

    t.client.fund(&t.channel_id, &A);
    t.verify_bal_contract(bal_contract_after_afund);
    t.verify_bal_a(bal_a_after_fund);

    t.client.abort_funding(&t.channel_id);
    t.verify_bal_contract(bal_contract_after_abort);
    t.verify_bal_a(bal_a_after_abort);
}

#[test]
fn test_funding_abort_cross_mixedassets() {
    let env = Env::default();

    let cross_chain = true;
    let mixed_assets = true;

    let bal_a = vec![&env, 100, 150];
    let bal_b = vec![&env, 200, 250];

    let bal_a_after_fund = vec![&env, 0, 0];
    let bal_a_after_abort = vec![&env, 100, 150];

    let bal_contract_after_afund = vec![&env, 100, 150];
    let bal_contract_after_abort = vec![&env, 0, 0];

    let t = setup(&env, 10, bal_a, bal_b, true, cross_chain, mixed_assets);

    let stellar_channel_id = t.state.channel_id.get_unchecked(0);

    t.client.open(&t.params, &t.state);
    t.verify_state(&t.state, &stellar_channel_id);

    t.client.fund(&t.channel_id, &A);
    t.verify_bal_contract(bal_contract_after_afund);
    t.verify_bal_a(bal_a_after_fund);

    t.client.abort_funding(&t.channel_id);
    t.verify_bal_contract(bal_contract_after_abort);
    t.verify_bal_a(bal_a_after_abort);
}

#[test]
fn test_dispute_cross_sameasset() {
    let env = Env::default();
    let cross_chain = true;

    let bal_contract_after_afund = vec![&env, 100, 150];
    let bal_contract_after_bfund = vec![&env, 300, 400];
    let bal_a_after_wdraw = vec![&env, 100, 200];
    let bal_b_after_wdraw = vec![&env, 200, 200];
    let bal_a_after_afund = vec![&env, 0, 0];
    let bal_b_after_bfund = vec![&env, 0, 0];
    let to_send_a = vec![&env, 0, 50];

    let bal_a = vec![&env, 100, 150];
    let bal_b = vec![&env, 200, 250];

    let bal_contract_after_fclose = vec![&env, 300, 400];
    let bal_contract_after_awdraw = vec![&env, 200, 200];
    let bal_contract_after_bwdraw = vec![&env, 0, 0];
    let mut t = setup(&env, 10, bal_a, bal_b, true, cross_chain, false);

    let stellar_channel_id = t.state.channel_id.get_unchecked(0);

    t.client.open(&t.params, &t.state);
    t.verify_state(&t.state, &stellar_channel_id);

    t.client.fund(&t.state.channel_id.get_unchecked(0), &A);
    t.verify_bal_contract(bal_contract_after_afund);
    t.verify_bal_a(bal_a_after_afund);

    t.client.fund(&t.state.channel_id.get_unchecked(0), &B);
    t.verify_bal_contract(bal_contract_after_bfund);
    t.verify_bal_b(bal_b_after_bfund);

    t.send_to_a(to_send_a);

    let sig_a_stellar = t.sigs_ccabi_a();
    let sig_b_stellar = t.sigs_ccabi_b();

    t.client
        .dispute(&t.state, &sig_a_stellar, &sig_b_stellar, &cross_chain);

    t.set_ledger_time(
        t.env.ledger().get(),
        t.env.ledger().timestamp() + t.params.challenge_duration,
    );

    t.client.force_close(&t.channel_id);
    t.verify_state(&t.state, &stellar_channel_id);
    t.verify_bal_contract(bal_contract_after_fclose);

    t.client.withdraw(&t.channel_id, &A);
    t.verify_bal_a(bal_a_after_wdraw);
    t.verify_bal_contract(bal_contract_after_awdraw);

    t.client.withdraw(&t.channel_id, &B);
    t.verify_bal_b(bal_b_after_wdraw);
    t.verify_bal_contract(bal_contract_after_bwdraw);
}

#[test]
fn test_dispute_cross_mixedassets() {
    let env = Env::default();
    let cross_chain = true;
    let mixed_assets = true;
    let bal_contract_after_afund = vec![&env, 100, 150];
    let bal_contract_after_bfund = vec![&env, 300, 400];
    let bal_a_after_wdraw = vec![&env, 100, 200];
    let bal_b_after_wdraw = vec![&env, 200, 200];
    let bal_a_after_afund = vec![&env, 0, 0];
    let bal_b_after_bfund = vec![&env, 0, 0];
    let to_send_a = vec![&env, 0, 50];

    let bal_a = vec![&env, 100, 150];
    let bal_b = vec![&env, 200, 250];

    let bal_contract_after_fclose = vec![&env, 300, 400];
    let bal_contract_after_awdraw = vec![&env, 200, 200];
    let bal_contract_after_bwdraw = vec![&env, 0, 0];
    let mut t = setup(&env, 10, bal_a, bal_b, true, cross_chain, mixed_assets);

    let stellar_channel_id = t.state.channel_id.get_unchecked(0);

    t.client.open(&t.params, &t.state);
    t.verify_state(&t.state, &stellar_channel_id);

    t.client.fund(&t.state.channel_id.get_unchecked(0), &A);
    t.verify_bal_contract(bal_contract_after_afund);
    t.verify_bal_a(bal_a_after_afund);

    t.client.fund(&t.state.channel_id.get_unchecked(0), &B);
    t.verify_bal_contract(bal_contract_after_bfund);
    t.verify_bal_b(bal_b_after_bfund);

    t.send_to_a(to_send_a);

    let sig_a_stellar = t.sigs_ccabi_a();
    let sig_b_stellar = t.sigs_ccabi_b();
    t.client
        .dispute(&t.state, &sig_a_stellar, &sig_b_stellar, &cross_chain);

    t.set_ledger_time(
        t.env.ledger().get(),
        t.env.ledger().timestamp() + t.params.challenge_duration,
    );

    t.client.force_close(&t.channel_id);
    t.verify_state(&t.state, &stellar_channel_id);
    t.verify_bal_contract(bal_contract_after_fclose);

    t.client.withdraw(&t.channel_id, &A);
    t.verify_bal_a(bal_a_after_wdraw);
    t.verify_bal_contract(bal_contract_after_awdraw);

    t.client.withdraw(&t.channel_id, &B);
    t.verify_bal_b(bal_b_after_wdraw);
    t.verify_bal_contract(bal_contract_after_bwdraw);
}

#[test]
fn test_malicious_dispute() {
    let env = Env::default();
    let cross_chain = true;
    let bal_a = vec![&env, 100, 150];
    let bal_b = vec![&env, 200, 250];

    let bal_contract_after_afund = vec![&env, 100, 150];
    let bal_contract_after_bfund = vec![&env, 300, 400];
    let bal_contract_after_fclose = vec![&env, 300, 400];
    let bal_contract_after_awdraw = vec![&env, 150, 350];
    let bal_contract_after_bwdraw = vec![&env, 0, 0];

    let bal_a_after_afund = vec![&env, 0, 0];
    let bal_b_after_bfund = vec![&env, 0, 0];

    let bal_a_after_fwdraw = vec![&env, 150, 50];
    let bal_b_after_fwdraw = vec![&env, 150, 350];

    let to_send_bal_first = vec![&env, 50, 0];
    let to_send_bal_second = vec![&env, 0, 100];
    let mut t = setup(&env, 10, bal_a, bal_b, true, cross_chain, false);

    let stellar_channel_id = t.state.channel_id.get_unchecked(0);

    t.client.open(&t.params, &t.state);
    t.verify_state(&t.state, &stellar_channel_id);

    t.client.fund(&stellar_channel_id, &A);
    t.verify_bal_contract(bal_contract_after_afund);
    t.verify_bal_a(bal_a_after_afund);

    t.client.fund(&stellar_channel_id, &B);
    t.verify_bal_contract(bal_contract_after_bfund);
    t.verify_bal_b(bal_b_after_bfund);

    t.send_to_a(to_send_bal_first);

    let (old_state, old_stellar_sig_a, old_stellar_sig_b) = t.state_and_sigs_cross_abi();

    t.send_to_b(to_send_bal_second);

    // malicious dispute by B (registering a state in which B still had more balance)
    t.client.dispute(
        &old_state,
        &old_stellar_sig_a,
        &old_stellar_sig_b,
        &cross_chain,
    );
    t.verify_state(&old_state, &stellar_channel_id);

    // dispute with latest state by A
    let sig_a_stellar = t.sigs_ccabi_a();
    let sig_b_stellar = t.sigs_ccabi_b();
    t.client
        .dispute(&t.state, &sig_a_stellar, &sig_b_stellar, &cross_chain);
    t.verify_state(&t.state, &stellar_channel_id);

    t.set_ledger_time(
        t.env.ledger().get(),
        t.env.ledger().timestamp() + t.params.challenge_duration,
    );

    t.client.force_close(&stellar_channel_id);
    t.verify_state(&t.state, &stellar_channel_id);
    t.verify_bal_contract(bal_contract_after_fclose);

    t.client.withdraw(&stellar_channel_id, &A);
    t.verify_bal_a(bal_a_after_fwdraw);
    t.verify_bal_contract(bal_contract_after_awdraw);

    t.client.withdraw(&stellar_channel_id, &B);
    t.verify_bal_b(bal_b_after_fwdraw);
    t.verify_bal_contract(bal_contract_after_bwdraw);
}

fn sign_single(e: &Env, signer: &TestKeyPair, payload: &State) -> BytesN<64> {
    let mut heap = [0u8; 1000];
    let bytes = payload.clone().to_xdr(e);
    let len = bytes.len();
    bytes.copy_into_slice(&mut heap[..len as usize]);

    match signer {
        TestKeyPair::Single(keypair) => keypair.sign(&heap[..len as usize]).to_bytes().into_val(e),
        TestKeyPair::Cross(_) => {
            panic!("use this function for stellar keypair only");
        }
    }
}

fn sign_cross(e: &Env, signer: &TestKeyPair, payload: &State) -> BytesN<64> {
    let bytes = payload.clone().to_xdr(e);
    let hashed_state = e.crypto().keccak256(&bytes);
    let ethhash = EthHash(hashed_state.into());
    match signer {
        TestKeyPair::Cross(keypair1) => {
            let sig1 = keypair1.sign_eth(&ethhash);
            let sig1_ethbytes = sig1.0;
            let mut sig1_ethbytes_trimmed: [u8; 64] = [0u8; 64];
            sig1_ethbytes_trimmed.copy_from_slice(&sig1_ethbytes[0..64]);

            let sig1_bytes = BytesN::<64>::from_array(&e, &sig1_ethbytes_trimmed);

            sig1_bytes
        }
        TestKeyPair::Single(_) => {
            panic!("Only use this function for cross keypair");
        }
    }
}

fn sign_cross_abi(e: &Env, signer: &TestKeyPair, payload: &State) -> BytesN<64> {
    let state_sol = convert_state(&e, &payload).unwrap();
    let state_sol_abi = state_sol.abi_encode();

    let state_sol_hashed = keccak256(&state_sol_abi);
    let state_sol_bytesn = BytesN::<32>::from_array(&e, &state_sol_hashed);

    let ethhash = EthHash(state_sol_bytesn.into());
    match signer {
        TestKeyPair::Cross(keypair1) => {
            let sig1 = keypair1.sign_eth(&ethhash);
            let sig1_ethbytes = sig1.0;
            let mut sig1_ethbytes_trimmed: [u8; 64] = [0u8; 64];
            sig1_ethbytes_trimmed.copy_from_slice(&sig1_ethbytes[0..64]);

            let sig1_bytes = BytesN::<64>::from_array(&e, &sig1_ethbytes_trimmed);

            sig1_bytes
        }
        TestKeyPair::Single(_) => {
            panic!("Only use this function for cross keypair");
        }
    }
}

fn public_key(e: &Env, signer: &Ed25519SigningKey) -> BytesN<32> {
    signer.verifying_key().to_bytes().into_val(e)
}
fn generate_keypair() -> Ed25519SigningKey {
    Ed25519SigningKey::generate(&mut thread_rng())
}

fn setup(
    e: &Env,
    challenge_duration: u64,
    bal_a: Vec<i128>,
    bal_b: Vec<i128>,
    mock_auth: bool,
    cross_chain: bool,
    mixed_assets: bool,
) -> Test<'static> {
    let ledgerinf = LedgerInfo {
        timestamp: 0,
        protocol_version: 1,
        sequence_number: 10,
        network_id: Default::default(),
        base_reserve: 10,
        min_temp_entry_ttl: 16,
        min_persistent_entry_ttl: 4096,
        max_entry_ttl: 6312000,
    };

    e.ledger().set(ledgerinf.clone());

    if mock_auth {
        e.mock_all_auths();
    }

    let (alice, bob, alice_keypair, bob_keypair) = if cross_chain {
        let (alice_privkey, alice_pubkey) = generate_secp_keypair();

        let (bob_privkey, bob_pubkey) = generate_secp_keypair();
        let alice_keypair = EthSigner::init_from_key(alice_privkey);

        let bob_keypair = EthSigner::init_from_key(bob_privkey);

        let alice_keypair = TestKeyPair::Cross(alice_keypair);
        let bob_keypair = TestKeyPair::Cross(bob_keypair);

        let alice_pubkey_bytesn = get_pubkey_secp_bytesn(&e, &alice_pubkey);

        let bob_pubkey_bytesn = get_pubkey_secp_bytesn(&e, &bob_pubkey);

        let alice_l2_pubkeys = multi::ChannelPubKey::Cross(alice_pubkey_bytesn.clone());

        let bob_l2_pubkeys = multi::ChannelPubKey::Cross(bob_pubkey_bytesn.clone());

        let alice_bytes: [u8; 20] = [
            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
        ];
        let alice_eth_bytes = Bytes::from_slice(&e, &alice_bytes);

        let alice_eth_bytesn: BytesN<20> = alice_eth_bytes
            .try_into()
            .expect("some bytes for alice to have length 20 like an Ethereum address");

        let bob_eth_bytes: [u8; 20] = [
            21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
        ];
        let bob_eth_bytes = Bytes::from_slice(&e, &bob_eth_bytes);
        let bob_eth_bytesn: BytesN<20> = bob_eth_bytes
            .try_into()
            .expect("some bytes for bob to have length 20 like an Ethereum address");

        let alice = Participant {
            stellar_pubkey: alice_l2_pubkeys,
            cc_addr: alice_eth_bytesn,
            stellar_addr: Address::generate(&e),
        };

        let bob = Participant {
            stellar_pubkey: bob_l2_pubkeys,
            stellar_addr: Address::generate(&e),
            cc_addr: bob_eth_bytesn,
        };

        (alice, bob, alice_keypair, bob_keypair)
    } else {
        let alice_keypair = TestKeyPair::Single(generate_keypair());
        let alice_pubkeybytesn = alice_keypair.public_key_single(&e);
        let bob_keypair = TestKeyPair::Single(generate_keypair());
        let bob_pubkeybytesn = bob_keypair.public_key_single(&e);

        let alice_channelpubkey = alice_pubkeybytesn.to_channel_pubkey();
        let bob_channelpubkey = bob_pubkeybytesn.to_channel_pubkey();
        let zero_cc_addr = BytesN::<20>::from_array(&e, &[0u8; 20]);

        let alice = Participant {
            stellar_addr: Address::generate(&e),
            stellar_pubkey: alice_channelpubkey,
            cc_addr: zero_cc_addr.clone(),
        };
        let bob = Participant {
            stellar_addr: Address::generate(&e),
            stellar_pubkey: bob_channelpubkey,
            cc_addr: zero_cc_addr,
        };

        (alice, bob, alice_keypair, bob_keypair)
    };

    if bal_a.len() != 2 {
        panic!("test setup should utilize two assets")
    }

    if bal_a.len() != bal_b.len() {
        panic!("balances arrays are not of same length");
    }
    let mut token_addresses = vec![&e];

    let mut cross_assets_0 = multi::CrossAsset {
        address: AddressType::Stellar(Address::generate(&e)),
        chain: multi::Chain::Stellar,
    };

    let mut cross_assets_1 = multi::CrossAsset {
        address: AddressType::Stellar(Address::generate(&e)),
        chain: multi::Chain::Stellar,
    };

    if mixed_assets == false {
        for i in 0..bal_a.len() {
            let admin_address = Address::generate(&e);
            let token_admin = StellarAssetClient::new(
                &e,
                &e.register_stellar_asset_contract(admin_address.clone()),
            );
            token_addresses.push_back(token_admin.address.clone());

            token_admin.mint(&alice.stellar_addr, &bal_a.get(i).unwrap());
            token_admin.mint(&bob.stellar_addr, &bal_b.get(i).unwrap());
        }
        cross_assets_0 = multi::CrossAsset {
            address: AddressType::Stellar(token_addresses.get(0).unwrap().clone()),
            chain: multi::Chain::Stellar,
        };

        cross_assets_1 = multi::CrossAsset {
            address: AddressType::Stellar(token_addresses.get(1).unwrap().clone()),
            chain: multi::Chain::Stellar,
        };
    }

    if mixed_assets {
        let admin_address = Address::generate(&e);
        let token_admin = StellarAssetClient::new(
            &e,
            &e.register_stellar_asset_contract(admin_address.clone()),
        );
        token_addresses.push_back(token_admin.address.clone());

        token_admin.mint(&alice.stellar_addr, &bal_a.get(0).unwrap());
        token_admin.mint(&bob.stellar_addr, &bal_b.get(0).unwrap());

        cross_assets_0 = multi::CrossAsset {
            address: AddressType::Stellar(token_addresses.get(0).unwrap().clone()),
            chain: multi::Chain::Stellar,
        };

        let checksummed = "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045";
        let expected = address!("d8da6bf26964af9d7eed9e03e53415d37aa96045");
        let eth_address = EthAddr::parse_checksummed(checksummed, None).expect("valid checksum");
        assert_eq!(eth_address, expected);

        let eth_addr_slice = eth_address.as_slice();
        let eth_addr_array: &[u8; 20] = eth_addr_slice
            .try_into()
            .expect("ethereum address slice is not of length 20");
        let eth_addr_bytes = BytesN::<20>::from_array(&e, eth_addr_array);

        cross_assets_1 = multi::CrossAsset {
            address: AddressType::Eth(eth_addr_bytes),
            chain: multi::Chain::Ethereum,
        };
    }

    let params = Params {
        a: alice.clone(),
        b: bob.clone(),
        nonce: BytesN::<32>::random(&e),
        challenge_duration: challenge_duration,
    };

    let channel_id = get_channel_id(&e, &params);

    let zero_byte_array = [0u8; 32];

    // Create a BytesN<32> from the zero byte array as a dummy channel id
    let channel_id_zero: BytesN<32> = BytesN::from_array(&e, &zero_byte_array);

    let chan_ids = vec![&e, channel_id.clone(), channel_id_zero.clone()];

    let state = State {
        channel_id: chan_ids,
        balances: Balances {
            tokens: multi::ChannelAsset::Cross(vec![&e, cross_assets_0, cross_assets_1]), //vec![&e, cross_assets_1, cross_assets_2]
            bal_a: bal_a,
            bal_b: bal_b,
        },
        version: 0,
        finalized: false,
    };
    let client = AdjudicatorClient::new(&e, &e.register_contract(None, Adjudicator {}));
    Test {
        env: e.clone(),
        alice,
        bob,
        alice_keypair,
        bob_keypair,
        params,
        channel_id,
        state,
        client,
        token_addresses,
    }
}

struct Test<'a> {
    env: Env,
    alice: Participant,
    bob: Participant,
    alice_keypair: TestKeyPair,
    bob_keypair: TestKeyPair,
    params: Params,
    channel_id: BytesN<32>,
    state: State,
    client: AdjudicatorClient<'a>,
    token_addresses: Vec<Address>,
}

impl Test<'_> {
    fn verify_state(&self, state: &State, channel_id: &BytesN<32>) {
        let c = self.client.get_channel(&channel_id);
        assert!(c.is_some());
        assert_eq!(&self.client.get_channel(&channel_id).unwrap().state, state);
    }

    fn update(&mut self, new_state: State) {
        self.state = new_state.clone();
    }

    fn sign_state_single(&self, state: &State) -> (BytesN<64>, BytesN<64>) {
        let sig_a = sign_single(&self.env, &self.alice_keypair, &state);
        let sig_b = sign_single(&self.env, &self.bob_keypair, &state);
        (sig_a, sig_b)
    }

    fn sign_state_cross(&self, state: &State) -> (BytesN<64>, BytesN<64>) {
        let sig_a = sign_cross(&self.env, &self.alice_keypair, &state);
        let sig_b = sign_cross(&self.env, &self.bob_keypair, &state);
        (sig_a, sig_b)
    }

    fn send_to_a(&mut self, amt: Vec<i128>) {
        assert_eq!(
            self.state.balances.bal_a.len(),
            amt.len(),
            "length of bal_a and amt must be the same"
        );
        assert_eq!(
            self.state.balances.bal_b.len(),
            amt.len(),
            "length of bal_b and amt must be the same"
        );

        let mut new_bal_a = vec![&self.env];
        let mut new_bal_b = vec![&self.env];

        for i in 0..amt.len() {
            let bal_a = self.state.balances.bal_a.get(i).unwrap() + amt.get(i).unwrap();
            let bal_b = self.state.balances.bal_b.get(i).unwrap() - amt.get(i).unwrap();
            new_bal_a.push_back(bal_a);
            new_bal_b.push_back(bal_b);
        }

        self.update(State {
            channel_id: self.state.channel_id.clone(),
            balances: Balances {
                tokens: self.state.balances.tokens.clone(),
                bal_a: new_bal_a,
                bal_b: new_bal_b,
            },
            version: self.state.version + 1,
            finalized: self.state.finalized,
        })
    }

    fn send_to_b(&mut self, amt: Vec<i128>) {
        assert_eq!(
            self.state.balances.bal_a.len(),
            amt.len(),
            "length of bal_a and amt must be the same"
        );
        assert_eq!(
            self.state.balances.bal_b.len(),
            amt.len(),
            "length of bal_b and amt must be the same"
        );
        let mut new_bal_a = vec![&self.env];
        let mut new_bal_b = vec![&self.env];

        for i in 0..amt.len() {
            let bal_a = self.state.balances.bal_a.get(i).unwrap() - amt.get(i).unwrap();
            let bal_b = self.state.balances.bal_b.get(i).unwrap() + amt.get(i).unwrap();
            new_bal_a.push_back(bal_a);
            new_bal_b.push_back(bal_b);
        }

        self.update(State {
            channel_id: self.state.channel_id.clone(),
            balances: Balances {
                tokens: self.state.balances.tokens.clone(),
                bal_a: new_bal_a,
                bal_b: new_bal_b,
            },
            version: self.state.version + 1,
            finalized: self.state.finalized,
        })
    }

    fn finalize(&mut self) {
        self.update(State {
            version: self.state.version + 1,
            finalized: true,
            ..self.state.clone()
        })
    }

    fn sigs_cc_a(&self) -> BytesN<64> {
        sign_cross(&self.env, &self.alice_keypair, &self.state)
    }

    fn sigs_cc_b(&self) -> BytesN<64> {
        sign_cross(&self.env, &self.bob_keypair, &self.state)
    }

    fn sigs_ccabi_a(&self) -> BytesN<64> {
        sign_cross_abi(&self.env, &self.alice_keypair, &self.state)
    }

    fn sigs_ccabi_b(&self) -> BytesN<64> {
        sign_cross_abi(&self.env, &self.bob_keypair, &self.state)
    }

    fn sigs_single_a(&self) -> BytesN<64> {
        sign_single(&self.env, &self.alice_keypair, &self.state)
    }

    fn sigs_single_b(&self) -> BytesN<64> {
        sign_single(&self.env, &self.bob_keypair, &self.state)
    }

    fn verify_bal_a(&self, bal: Vec<i128>) {
        self.verify_bal(&self.alice.stellar_addr, bal);
    }

    fn verify_bal_b(&self, bal: Vec<i128>) {
        self.verify_bal(&self.bob.stellar_addr, bal);
    }
    fn verify_bal_contract(&self, bal: Vec<i128>) {
        for i in 0..self.token_addresses.len() {
            let token_client = self.gen_token_client(i);
            assert_eq!(
                token_client.balance(&self.client.address),
                bal.get(i).unwrap()
            );
        }
    }

    fn verify_bal(&self, participant_addr: &Address, bal: Vec<i128>) {
        for i in 0..self.token_addresses.len() {
            let token_client = self.gen_token_client(i);
            assert_eq!(token_client.balance(participant_addr), bal.get(i).unwrap());
        }
    }
    fn gen_token_client(&self, idx: u32) -> TokenClient {
        let token_addr = self.token_addresses.get(idx).unwrap();

        let token_client = TokenClient::new(&self.env, &token_addr);
        return token_client;
    }

    fn set_ledger_time(&mut self, params: LedgerInfo, new_time: u64) {
        self.env.ledger().set(LedgerInfo {
            timestamp: new_time,
            ..params
        });
    }

    fn state_and_sigs_single(&self) -> (State, BytesN<64>, BytesN<64>) {
        (
            self.state.clone(),
            self.sigs_single_a(),
            self.sigs_single_b(),
        )
    }

    fn state_and_sigs_cross(&self) -> (State, BytesN<64>, BytesN<64>) {
        let sig_a = self.sigs_cc_a();
        let sig_b = self.sigs_cc_b();
        (self.state.clone(), sig_a, sig_b)
    }

    fn state_and_sigs_cross_abi(&self) -> (State, BytesN<64>, BytesN<64>) {
        let sig_a = self.sigs_ccabi_a();
        let sig_b = self.sigs_ccabi_b();
        (self.state.clone(), sig_a, sig_b)
    }
}

fn generate_secp_keypair() -> (SigningKey, VerifyingKey) {
    let privkey = SigningKey::random(&mut thread_rng());
    let pubkey = VerifyingKey::from(&privkey);
    (privkey, pubkey)
}

fn get_pubkey_secp_bytesn(env: &Env, pubkey: &VerifyingKey) -> BytesN<65> {
    let pubkey_bytes: [u8; 65] = pubkey
        .to_encoded_point(false)
        .as_bytes()
        .try_into()
        .unwrap();
    let pubkey_bytesn = BytesN::from_array(env, &pubkey_bytes);
    pubkey_bytesn
}

pub enum TestKeyPair {
    Single(Ed25519SigningKey),
    Cross(EthSigner),
}
pub enum PublicKeyBytes {
    Stellar(BytesN<32>),
    Eth(BytesN<65>),
}

impl PublicKeyBytes {
    pub fn to_channel_pubkey(&self) -> multi::ChannelPubKey {
        match self {
            PublicKeyBytes::Stellar(bytes) => multi::ChannelPubKey::Single(bytes.clone()),
            PublicKeyBytes::Eth(bytes) => multi::ChannelPubKey::Cross(bytes.clone()),
        }
    }
}
impl TestKeyPair {
    pub fn public_key_single(&self, e: &Env) -> PublicKeyBytes {
        match self {
            TestKeyPair::Single(keypair) => {
                PublicKeyBytes::Stellar(keypair.verifying_key().to_bytes().into_val(e))
            }
            _ => panic!("Invalid key type: expected Single Ed25519SigningKey"),
        }
    }

    pub fn public_key_cross(&self, e: &Env) -> PublicKeyBytes {
        match self {
            TestKeyPair::Cross(keypair1) => {
                PublicKeyBytes::Eth(get_pubkey_secp_bytesn(e, &keypair1.verifying_key()))
            }
            _ => panic!("Invalid key type: expected Cross with two EthSigners"),
        }
    }
}

impl TestKeyPair {
    pub fn get_single_signer(&self) -> &Ed25519SigningKey {
        match self {
            TestKeyPair::Single(signer) => signer,
            _ => panic!("Invalid key type: expected Ed25519SigningKey"),
        }
    }

    pub fn get_cross_signers(&self) -> &EthSigner {
        match self {
            TestKeyPair::Cross(signer1) => (signer1),
            _ => panic!("Invalid key type: expected Cross with two EthSigners"),
        }
    }
}
